#include <msp430.h> 
unsigned int adc_raw;

/**
 * main.c
 */
int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
	PM5CTL0 &= ~LOCKLPM5; //clear LOCKLPM5 bit
	P4DIR &= ~BIT1; //input direction (P4.1)
	P4REN |= BIT1; //enable internal resistors
	P4OUT |= BIT1; //pull-up resistors
	P6DIR &= ~(BIT0|BIT1); //input direction (P6.0, P6.1)
	P6REN |= BIT0 | BIT1; //enable internal resistors
	P6OUT |= BIT0 | BIT1; //pull-up resistors
	P7DIR &= ~(BIT0|BIT1); //input direction (P7.0, P7.1)
	P7REN |= BIT0 | BIT1; //enable internal resistors
	P7OUT |= BIT0 | BIT1; //pull-up resistors
	P1DIR |= BIT0; //output direction (P1.0)
	P4DIR |= BIT7; //output direction (P4.7)
	P4OUT |= BIT7; //set (P4.7)
	P1DIR |= BIT2 | BIT3; //output direction (P1.2, P1.3)
	P1SEL1 &= ~(BIT2|BIT3); //alternate function (TA1.1, TA1.2)
	P1SEL0 |= (BIT2|BIT3); //alternate function (TA1.1, TA1.2)
	TA1CTL = TASSEL_2|MC_1|TACLR; //TA1CTL setup
	TA1CCR0 = 2000; //TA1CCR0 value
	ADC12CTL0 = ADC12SHT0_6 | ADC12ON;
	ADC12CTL1 = ADC12SHP;
	ADC12CTL2 = ADC12RES_2;
	ADC12MCTL0 = ADC12INCH_9;
	ADC12IER0 |= ADC12IE0;
	__enable_interrupt();
	while(1){
	    ADC12CTL0 |= ADC12ENC | ADC12SC;
	    int x = adc_raw;
	    int state;
	    if((P6IN & BIT1) == 0){ //Left (Reverse and Slow Decay)
	        TA1CCR1 = 1000; //TA1CCR1 value
	        TA1CCTL1 = OUTMOD_7; //Output Mode 7
	        TA1CCR2 = 2000; //TA1CCR2 value
	        TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        state = 1;
	    }
	    if((P6IN & BIT0) == 0){ //Right (Forward and Slow Decay)
	        TA1CCR1 = 2000; //TA1CCR1 value
	        TA1CCTL1 = OUTMOD_7; //Output Mode 7
	        TA1CCR2 = 1000; //TA1CCR2 value
	        TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        state = 2;
	    }
	    if((P7IN & BIT1) == 0){ //Up (Not Spinning and Slow Decay)
	        TA1CCR1 = 1000; //TA1CCR1 value
	        TA1CCTL1 = OUTMOD_7; //Output Mode 7
	        TA1CCR2 = 1000; //TA1CCR2 value
	        TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        state = 3;

	    }
	    if((P7IN & BIT0) == 0){ //Down (Not Spinning and Fast Decay)
	        TA1CCR1 = 0; //TA1CCR1 value
	        TA1CCTL1 = OUTMOD_7; //Output Mode 7
	        TA1CCR2 = 0; //TA1CCR2 value
	        TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        state = 4;
	    }
	    __delay_cycles(25000);
//	    if(x == 1){
//	        P1OUT = BIT0;
//	    }
	    if(x > 3700){
	        if(state == 1){
	            TA1CCR1 = 500; //TA1CCR1 value
	            TA1CCTL1 = OUTMOD_7; //Output Mode 7
	            TA1CCR2 = 2000; //TA1CCR2 value
	            TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        }
	        if(state == 2){
	            TA1CCR1 = 2000; //TA1CCR1 value
	            TA1CCTL1 = OUTMOD_7; //Output Mode 7
	            TA1CCR2 = 500; //TA1CCR2 value
	            TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        }
	        if(state == 3){
	            TA1CCR1 = 1000; //TA1CCR1 value
	            TA1CCTL1 = OUTMOD_7; //Output Mode 7
	            TA1CCR2 = 1000; //TA1CCR2 value
	            TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        }
	        if(state == 4){
	            TA1CCR1 = 0; //TA1CCR1 value
	            TA1CCTL1 = OUTMOD_7; //Output Mode 7
	            TA1CCR2 = 0; //TA1CCR2 value
	            TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        }

	    }
	    if(x < 3700){
	        if(state == 1){
	            TA1CCR1 = 1500; //TA1CCR1 value
	            TA1CCTL1 = OUTMOD_7; //Output Mode 7
	            TA1CCR2 = 2000; //TA1CCR2 value
	            TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        }
	        if(state == 2){
	            TA1CCR1 = 2000; //TA1CCR1 value
	            TA1CCTL1 = OUTMOD_7; //Output Mode 7
	            TA1CCR2 = 1500; //TA1CCR2 value
	            TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        }
	        if(state == 3){
	            TA1CCR1 = 1000; //TA1CCR1 value
	            TA1CCTL1 = OUTMOD_7; //Output Mode 7
	            TA1CCR2 = 1000; //TA1CCR2 value
	            TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        }
	        if(state == 4){
	            TA1CCR1 = 0; //TA1CCR1 value
	            TA1CCTL1 = OUTMOD_7; //Output Mode 7
	            TA1CCR2 = 0; //TA1CCR2 value
	            TA1CCTL2 = OUTMOD_7; //Output Mode 7
	        }
	    }

	}
	return 0;
}

#pragma vector = ADC12_B_VECTOR
__interrupt void ADC12_ISR(void){
    if((ADC12IFGR0 & BIT0)!=0){
        adc_raw=ADC12MEM0;
    }
}
